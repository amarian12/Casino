<?php

namespace App\Http\Controllers\Endpoints;

use App\Helpers\CurrencyService;
use App\Helpers\HAWKAuthService;
use App\Models\GameBet;
use App\Http\Controllers\Controller;
use App\Traits\FundMovementTrait;
use Carbon\Carbon;
use Illuminate\Http\JsonResponse;

/**
 * Class LuckyStreakController
 * @package App\Http\Controllers\Endpoints
 */
class LuckyStreakController extends Controller
{
    use FundMovementTrait;

    /**
     * @var string
     */
    protected $hmacKey;

    /**
     * @var array traitError => providerError
     */
    protected $errors = [
        101 => 'ERR-AUTH-001',
        102 => 'ERR-FUND-004',
        201 => 'ERR-FUND-001',
        202 => 'ERR-FUND-001',
        203 => 'ERR-FUND-001',
        204 => 'ERR-FUND-001',
        999 => 'ERR-GNRL-999',
    ];

    /**
     * @var array code => title
     */
    private $providerErrorList = [
        'ERR-AUTH-001' => 'Authentication Code Validation Failure',
        'ERR-FUND-001' => 'Request Rejected – A final return code',
        'ERR-FUND-002' => 'Still In Processing',
        'ERR-FUND-003' => 'Retry Later',
        'ERR-FUND-004' => 'Account not found',
        'ERR-FUND-019' => 'Player loss limit has been exceeded',
        'ERR-GNRL-999' => 'Unspecified Error',
    ];

    /**
     * LuckyStreakController constructor.
     */
    public function __construct()
    {
        $this->hmacKey = config('providers.lucky-streak.hmac_key_normal');
    }

    /**
     * Request parameters:
     *  operatorName:       string      M   Identification of the operator this player is assumed to belong to.
     *  authorizationCode:  string      M   Authorization code provided by the player initially generated by the operator.
     *
     * Response parameters:
     *  userName:           string      M   The unique identifier of the player owning the valid authcode.
     *  currency:           string      M   The player currency – may not change after initial login.
     *  language:           string      M   The player language.
     *  nickname:           string      M   The player nickname.
     *  lastUpdateDate:     Datetime    M   The account last details update date. Used to ignore details
     *                                          if the account is already updated on the platform side.
     *  balance:            decimal     M   Player latest balance as of the validation date.
     *  balanceTimestamp:   Datetime    M   The timestamp of the balance – used to discard old balance replies
     *                                          if a newer balance is known. Milliseconds precision is preferred.
     *  type:               string      O   If this is a special type of player: ‘VIP’, ‘TEST’.
     *  subOperator:        string      O   In case integrating with a platform and the games will be played
     *                                          from different skins/websites, this field should be used
     *                                          to save the name of the website the player came from.
     *
     * @return JsonResponse
     */
    public function auth()
    {
        $auth = (new HAWKAuthService())->hawkRequestAuthorization($this->hmacKey);

        if (!empty($auth['error'])) {
            return $this->errorMsg(101, $auth['error']);
        }

        $user = request()->user();

        if (empty($user)) {
            return $this->errorMsg(101, 'Invalid parameter');
        }

        return response()->json([
            'data' => [
                'userName'         => (string) $user->id,
                'currency'         => config('crm.currency'),
                'language'         => $user->language->code,
                'timeZone'         => null,
                'nickname'         => $user->name,
                'balance'          => (float) (new CurrencyService())->toDollarsClear($user->wallet->balance),
                'type'             => null,
                'subOperator'      => null,
                'balanceTimestamp' => Carbon::now()->toISOString(),
                'lastUpdateDate'   => $user->updated_at,
                'additionalFields' => null,
                'errorMessage'     => null,
                'isError'          => false,
            ],
            'errors' => null,
        ])->header('Server-Authorization', $auth['header']);
    }

    /**
     * Request parameters:
     *  operatorId:             string      M   Identification of the operator owning this player account.
     *  transactionRequestId:   string      M   Uniquely identifies the intent to change the balance.
     *                                              It may be repeated in more than one request upon request retry.
     *  userName:               string      M   Account owner unique username.
     *  eventType:              string      M   The type of event causing the balance change.
     *                                              See documentation for possible values.
     *  eventSubType:           string      O   The sub type of the event causing the balance change. See documentation.
     *  eventId:                string      M   The id of the event causing the balance change.
     *                                              Not guaranteed to be unique and for reference only.
     *  eventTime:              Datetime    M   The event time which could possibly be different
     *                                              than the funds movement time.
     *  gameId:                 string      O   For gameplay related movement. See documentation.
     *  gameType:               string      O   For gameplay related movement. See documentation.
     *  roundId:                string      O   For gameplay related movements within a round. See documentation.
     *  eventDetails:           struct      O   A complex structure describing the details of the event
     *                                              causing the balance change. See documentation.
     *  direction:              string      M   Indicates either Credit or Debit.
     *  currency:               string      M   The currency code of the account.
     *  amount:                 decimal     M   The amount of the movement.
     *
     * Response parameters:
     *  refTransactionId:       string      M   The wallet internal unique id of the transaction that modified the balance
     *                                              due to the request. Ignored in case of an unsuccessful return code.
     *  currency:               string      M   The currency code of the account.
     *  balance:                decimal     M   Player latest balance as of the request completion.
     *  balanceTimestamp:       Datetime    M   The timestamp of the balance – used to discard old balance replies
     *                                              if a newer balance is known. Milliseconds precision is preferred.
     *
     * @return JsonResponse
     */
    public function moveFunds()
    {
        $auth = (new HAWKAuthService())->hawkRequestAuthorization($this->hmacKey);

        if (!empty($auth['error'])) {
            return $this->errorMsg(101, 'HAWK Authorization failed');
        }

        $data = request()->all();

        $data = array_change_key_case($data, CASE_LOWER);
        $data['data'] = array_change_key_case($data['data'], CASE_LOWER);

        $info = [
            'transaction_id' => $data['data']['transactionrequestid'],
            'ref_id'         => $data['data']['eventid'],
            'gameReference'  => $data['data']['gameid'] ?? '',
            'amount'         => $data['data']['amount'],
        ];

        switch ($data['data']['direction']) {
            case GameBet::TYPE[0]: //Debit
                $result = $this->processDebit($info);

                if (!empty($result['error'])) {
                    return $this->errorMsg($result['error'], $result['message']);
                }
                break;

            case GameBet::TYPE[1]: //Credit
                $result = $this->processCredit($info);

                if (!empty($result['error'])) {
                    return $this->errorMsg($result['error'], $result['message']);
                }
                break;

            default:
                return $this->errorMsg(999, 'Unknown direction');
        }

        return response()->json([
            'data' => [
                'refTransactionId' => $data['data']['transactionrequestid'],
                'currency'         => $data['data']['currency'],
                'balance'          => (float) (new CurrencyService())->toDollarsClear($result['balance']),
                'balanceTimestamp' => Carbon::now()->toISOString(),
            ],
            'errors' => null,
        ])->header('Server-Authorization', $auth['header']);
    }

    /**
     * Request parameters:
     *  operatorId:                     string      M   Identification of the operator owning this player account.
     *  transactionRequestId:           string      M   Uniquely identifies the intent to change the balance.
     *                                                      It may be repeated in more than one request upon request retry.
     *  username:                       string      M   Account owner unique username.
     *  abortedTransactionRequestId:    string      M   The id of the transaction request to abort.
     *  abortTime                       Datetime    M   The time of the abort request creation.
     *  direction:                      string      M   Indicates either Credit or Debit.
     *  currency:                       string      M   The currency code of the account.
     *  amount:                         decimal     M   The amount of the movement.
     *
     * Response parameters:
     *  refTransactionId:               string      M   The wallet internal unique id of the transaction that modified the balance
     *                                                      due to the request. Ignored in case of an unsuccessful return code.
     *  currency:                       string      M   The currency code of the account.
     *  balance:                        decimal     M   Player latest balance as of the request completion.
     *  balanceTimestamp:               Datetime    M   The timestamp of the balance – used to discard old balance replies
     *                                                      if a newer balance is known. Milliseconds precision is preferred.
     *
     * @return JsonResponse
     */
    public function abortMoveFunds()
    {
        $auth = (new HAWKAuthService())->hawkRequestAuthorization($this->hmacKey);

        if (!empty($auth['error'])) {
            return $this->errorMsg(101, 'HAWK Authorization failed');
        }

        $data = request()->all();

        $data = array_change_key_case($data, CASE_LOWER);
        $data['data'] = array_change_key_case($data['data'], CASE_LOWER);


        $info = [
            'transaction_id' => $data['data']['abortedtransactionrequestid'],
            'amount'         => $data['data']['amount'],
        ];

        $result = $this->processAbort($info);

        if (!empty($result['error'])) {
            return $this->errorMsg($result['error'], $result['message']);
        }

        return response()->json([
            'data' => [
                'refAbortTransactionId' => $data['data']['abortedtransactionrequestid'],
                'currency'              => $data['data']['currency'],
                'balance'               => (float) (new CurrencyService())->toDollarsClear($result['balance']),
                'balanceTimestamp'      => Carbon::now()->toISOString(),
            ],
            'errors' => null,
        ])->header('Server-Authorization', $auth['header']);
    }

    /**
     * Request parameters:
     *  operatorId:         string      M   Identification of the operator owning this player account.
     *  username:           string      M   Account owner unique username.
     *  currency:           string      M   The currency code of the account.
     *
     * Response parameters:
     *  currency:           string      M   The currency code of the account.
     *  balance:            decimal     M   Player latest balance as of the request completion.
     *  balanceTimestamp:   Datetime    M   The timestamp of the balance – used to discard old balance replies
     *                                          if a newer balance is known. Milliseconds precision is preferred.
     *
     * @return JsonResponse
     */
    public function getBalance()
    {
        $auth = (new HAWKAuthService())->hawkRequestAuthorization($this->hmacKey);

        if (!empty($auth['error'])) {
            return $this->errorMsg(101, 'HAWK Authorization failed');
        }

        $user = request()->user();

        if (empty($user)) {
            return $this->errorMsg(204, 'Invalid username');
        }

        return response()->json([
            'data' => [
                'currency'         => config('crm.currency'),
                'balance'          => (float) (new CurrencyService())->toDollarsClear($user->wallet->balance),
                'balanceTimestamp' => Carbon::now()->toISOString(),
            ],
            'errors' => null,
        ])->header('Server-Authorization', $auth['header']);
    }

    /**
     * @param  int      $code
     * @param  string   $message
     * @return JsonResponse
     */
    private function errorMsg($code, $message = '')
    {
        $errorMsg = [
            'code'      => $this->errors[$code],
            'title'     => $this->providerErrorList[$this->errors[$code]],
            'detail'    => $message, //Our error explanation
        ];

        return response()->json(['errors' => [$errorMsg]]);
    }
}
